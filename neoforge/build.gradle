plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    neoForge {
        // convertAccessWideners = true
        // extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        // mixinConfig "railroadblocksaddon-common.mixins.json"
        // mixinConfig "railroadblocksaddon.mixins.json"
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

dependencies {
    neoForge "net.neoforged:neoforge:${rootProject.neoforge_version}"
    // Remove the next line if you don't want to depend on the API
    // modApi "dev.architectury:architectury-neoforge:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive = false }
}

repositories {
    maven {
        name = 'NeoForge'
        url = 'https://maven.neoforged.net/releases'
    }
}

processResources {
    filesMatching("META-INF/mods.toml") {
        expand minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
                neoforge_version: neoforge_version, neoforge_version_range: neoforge_version_range,
                neo_loader_version_range: neo_loader_version_range,
                mod_id: mod_id, mod_name: mod_name, mod_license: license, mod_version: mod_version,
                mod_authors: mod_authors, mod_credits: mod_credits, mod_description: mod_description
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.mod_id + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
